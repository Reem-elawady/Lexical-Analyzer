Introduction
import string

# Global variables
char_class = None
lexeme = []
next_char = ''
lex_len = 0
token = None
next_token = None
in_fp = None

# Character classes
LETTER = 0
DIGIT = 1
UNKNOWN = 99

# Token codes
INT_LIT = 10
IDENT = 11
ASSIGN_OP = 20
ADD_OP = 21
SUB_OP = 22
MULT_OP = 23
DIV_OP = 24
LEFT_PAREN = 25
RIGHT_PAREN = 26
EOF = -1

# Function declarations
def add_char():
    global lexeme, lex_len
    if lex_len < 98:
        lexeme.append(next_char)
        lex_len += 1
    else:
        print("Error - lexeme is too long")

def get_char():
    global next_char, char_class
    next_char = in_fp.read(1)
    if next_char == '':
        char_class = EOF
    elif next_char in string.ascii_letters:
        char_class = LETTER
    elif next_char in string.digits:
        char_class = DIGIT
    else:
        char_class = UNKNOWN

def get_non_blank():
    global next_char
    while next_char.isspace():
        get_char()

def lookup(ch):
    global next_token
    if ch == '(':
        add_char()
        next_token = LEFT_PAREN
    elif ch == ')':
        add_char()
        next_token = RIGHT_PAREN
    elif ch == '+':
        add_char()
        next_token = ADD_OP
    elif ch == '-':
        add_char()
        next_token = SUB_OP
    elif ch == '*':
        add_char()
        next_token = MULT_OP
    elif ch == '/':
        add_char()
        next_token = DIV_OP
    else:
        add_char()
        next_token = EOF
    return next_token

def lex():
    global lexeme, lex_len, next_token
    lexeme = []
    lex_len = 0
    get_non_blank()
    if char_class == LETTER:
        add_char()
        get_char()
        while char_class == LETTER or char_class ==
Phases of Compiler
Lexical Analyzer
Software Tools
Computer Program
Programming Language
Implementation of a Lexical Analyzer
result = sum + 47 / total

result = sum + 47 / total
Output Explanation:
result: This is identified as an identifier, so the token is 11 (IDENT).
=: The assignment operator, identified with token 20 (ASSIGN_OP).
sum: Another identifier, token 11 (IDENT).
+: The addition operator, token 21 (ADD_OP).
47: This is an integer literal, so the token is 10 (INT_LIT).
/: The division operator, token 24 (DIV_OP).
total: Another identifier, token 11 (IDENT).

Next token is: 11, Next lexeme is result
Next token is: 20, Next lexeme is =
Next token is: 11, Next lexeme is sum
Next token is: 21, Next lexeme is +
Next token is: 10, Next lexeme is 47
Next token is: 24, Next lexeme is /
Next token is: 11, Next lexeme is total
Next token is: -1, Next lexeme is EOF
References










Important Note: -
Technical reports include a mixture of text, tables, and figures. Consider how you can present the information best for your reader. Would a table or figure help to convey your ideas more effectively than a paragraph describing the same data?
Figures and tables should: -
Be numbered
Be referred to in-text, e.g. In Table 1…, and
Include a simple descriptive label - above a table and below a figure.
